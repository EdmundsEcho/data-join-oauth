name: depl-auth-img-prod

on:
  push:
    branches: [main, auth-drive]
    paths:
      - "Dockerfile.kube"
      - "oauth/src"
      - "config/"

  workflow_dispatch:
    inputs:
      logLevel:
        description: "Do not change"
        required: true
        default: "dummy input"
      tags:
        description: "dummy input, ignore"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Github registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: create unique tag
        run: |
          echo "IMAGE_ID=ghcr.io/lucivia/auth-img:$GITHUB_RUN_ID" >> $GITHUB_ENV
      - name: Build and push images as latest
        uses: docker/build-push-action@v2.9.0
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          file: Dockerfile.kube
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ghcr.io/lucivia/auth-img:latest, ${{ env.IMAGE_ID }}

      - name: Push to Digital Ocean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - run: |
          doctl kubernetes cluster kubeconfig save dj-cluster &&
          kubectl rollout restart deployment auth-deployment -n ingress-nginx
        continue-on-error: true

        # run: |
        #    IMAGE_ID=ghcr.io/lucivia/auth-img:$GITHUB_RUN_ID
        #    docker buildx build . -f Dockerfile.scratch -t $IMAGE_ID
        #    docker push $IMAGE_ID

        # run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
